name: build

on:
  schedule:
    - cron:  '*/30 * * * *'
  issue_comment:                                     
    types: [created]
  workflow_dispatch:
  push:
    branches:
      - main

concurrency:
  group: "docker"
  cancel-in-progress: false
  
jobs:
  build-and-push-image:
    strategy:
      fail-fast: false
      matrix:
        registry: ['', 'ghcr.io']
        version: ['', 'reg-']
        prefix: ['', 'base-', 'go-', 'node-', 'exts-']
        include:
          - version: ''
            gcc: true
            extended: true
          - registry: ''
            user: razonyang
          - registry: 'ghcr.io'
            user: ghcr.io/hugomods
          - version: ''
            prefix: ''
            dockerfile: docker/default/Dockerfile
            tags: '{0}/hugo:latest,{0}/hugo:{1}'
          - version: 'reg-'
            prefix: ''
            dockerfile: docker/default/Dockerfile
            tags: '{0}/hugo:reg,{0}/hugo:reg-{1}'
          - prefix: base-
            dockerfile: docker/base/Dockerfile
            tags: '{0}/hugo:{2}base,{0}/hugo:{3}base-{1}'
          - prefix: go-
            dockerfile: docker/go/Dockerfile
            tags: '{0}/hugo:{2}go,{0}/hugo:{3}go-{1}'
          - prefix: node-
            dockerfile: docker/node/Dockerfile
            tags: '{0}/hugo:{2}node,{0}/hugo:{3}node-{1}'
          - prefix: exts-
            dockerfile: docker/exts/Dockerfile
            tags: '{0}/hugo:{2}exts,{0}/hugo:{3}exts-{1}'
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.issue.number == 3 }}
    steps:
      - name: Fetch latest Hugo release
        id: release
        run: curl https://api.github.com/repos/gohugoio/hugo/releases/latest -s | jq .tag_name -r | awk '{print "version="substr($1,2)}' >> $GITHUB_OUTPUT
        
      - name: Check if the image exists
        if: steps.release.outputs.version != 'ull'
        id: check
        run: |
          if [[ -z "${{ matrix.registry }}" ]];
          then
            curl -s \
              -- url https://hub.docker.com/v2/namespaces/razonyang/repositories/hugo/tags/${{ matrix.version }}${{ matrix.prefix }}${{ steps.release.outputs.version }} \
              | jq 'has("name")' \
              | awk '{print "exists="$1}' \
              >> $GITHUB_OUTPUT;
          else
            curl -s \
              --url https://ghcr.io/v2/hugomods/hugo/tags/list \
              --header 'authorization: Bearer ${{ secrets.GHCR_TOKEN }}' \
              --header 'content-type: application/json' \
              | jq '.tags | index("${{ matrix.version }}${{ matrix.prefix }}${{ steps.release.outputs.version }}") >= 0' \
              | awk '{print "exists="$1}' \
              >> $GITHUB_OUTPUT;
          fi;
      
      - name: Checkout repository
        if: steps.check.outputs.exists == 'false'
        uses: actions/checkout@v3

      - name: Set up QEMU
        if: steps.check.outputs.exists == 'false'
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: steps.check.outputs.exists == 'false'
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker

      - name: Login to Docker Hub
        if: steps.check.outputs.exists == 'false'
        uses: docker/login-action@v2
        with:
          registry: ${{ matrix.registry }}
          username: ${{ matrix.registry == '' && 'razonyang' || github.actor }}
          password: ${{ matrix.registry == '' && secrets.DOCKERHUB_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Build the Alpine image
        if: steps.check.outputs.exists == 'false'
        uses: docker/build-push-action@v4
        with:
          context: ./docker/alpine
          file: ./docker/alpine/Dockerfile
          load: true
          tags: hugo-alpine:latest
          build-args: |
            GCC=${{ matrix.gcc }}

      - name: Build the builder image
        if: steps.check.outputs.exists == 'false'
        uses: docker/build-push-action@v4
        with:
          context: ./docker/builder
          file: ./docker/builder/Dockerfile
          load: true
          tags: hugo-builder:latest
          build-args: |
            HUGO_VERSION=v${{ steps.release.outputs.version }}
            HUGO_EXTENDED=${{ matrix.extended }}

      - name: Build and export to Docker
        if: steps.check.outputs.exists == 'false'
        uses: docker/build-push-action@v4
        with:
          load: true
          context: .
          file: ${{ matrix.dockerfile }}
          tags: razonyang/hugo:${{ matrix.version }}${{ matrix.prefix }}test
          build-args: |
            GCC=${{ matrix.gcc }}
          build-contexts: |
            alpine=docker-image://hugo-alpine:latest
            builder=docker-image://hugo-builder:latest

      - name: Test
        if: steps.check.outputs.exists == 'false'
        run: |
          docker run --rm -v $PWD/site:/src razonyang/hugo:${{ matrix.version }}${{ matrix.prefix }}test hugo

      - name: Build and push
        if: steps.check.outputs.exists == 'false'
        uses: docker/build-push-action@v4
        with:
          push: true
          context: .
          file: ${{ matrix.dockerfile }}
          tags: ${{ format(matrix.tags, matrix.user, steps.release.outputs.version, matrix.version, matrix.version) }}
          build-args: |
            GCC=${{ matrix.gcc }}
          build-contexts: |
            alpine=docker-image://hugo-alpine:latest
            builder=docker-image://hugo-builder:latest
