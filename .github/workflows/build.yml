name: build

on:
  schedule:
    - cron:  '*/30 * * * *'
  issue_comment:                                     
    types: [created]
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build.yml'
      - 'docker/hugo/**'

concurrency:
  group: "docker"
  cancel-in-progress: false

env:
  PLATFORMS: linux/amd64,linux/arm64
  IMAGE_OWNER: hugomods
  IMAGE_NAME: hugo

jobs:
  check:
    strategy:
      fail-fast: false
      matrix:
        edition: ['', 'std-'] # empty string and `std-` represent extended and standard edition of Hugo.
        variant:
          - ''
          - 'base-'
          - 'ci-'
          - 'dart-sass-'
          - 'dart-sass-base-'
          - 'dart-sass-git-'
          - 'dart-sass-go-'
          - 'dart-sass-go-git-'
          - 'dart-sass-node-'
          - 'dart-sass-node-git-'
          - 'exts-'
          - 'git-'
          - 'go-'
          - 'go-git-'
          - 'node-'
          - 'node-git-'
          - 'node-lts-'
        # Tags placeholders:
        #   0: the image owner.
        #   1: the image name.
        #   2: the Hugo version without leading v.
        #   3: standard (std-) or extended (empty string) edition indicator.
        include:
          # Set `extended` as true while building extended version of Hugo.
          - edition: ''
            extended: true
          - edition: ''
            variant: ''
            dockerfile: Dockerfile
            tags: |
              {0}/{1}:latest
              {0}/{1}:{2}
              ghcr.io/{0}/{1}:latest
              ghcr.io/{0}/{1}:{2}
          - edition: 'std-'
            variant: ''
            dockerfile: Dockerfile
            tags: |
              {0}/{1}:std
              {0}/{1}:std-{2}
              ghcr.io/{0}/{1}:std
              ghcr.io/{0}/{1}:std-{2}
              {0}/{1}:reg
              {0}/{1}:reg-{2}
              ghcr.io/{0}/{1}:reg
              ghcr.io/{0}/{1}:reg-{2}
          - variant: base-
            dockerfile: Dockerfile-base
            tags: |
              {0}/{1}:{3}base
              {0}/{1}:{3}base-{2}
              ghcr.io/{0}/{1}:{3}base
              ghcr.io/{0}/{1}:{3}base-{2}
          - variant: ci-
            dockerfile: Dockerfile-ci
            tags: |
              {0}/{1}:{3}ci
              {0}/{1}:{3}ci-{2}
              ghcr.io/{0}/{1}:{3}ci
              ghcr.io/{0}/{1}:{3}ci-{2}
          - variant: dart-sass-
            dockerfile: Dockerfile-dart-sass
            tags: |
              {0}/{1}:{3}dart-sass
              {0}/{1}:{3}dart-sass-{2}
              ghcr.io/{0}/{1}:{3}dart-sass
              ghcr.io/{0}/{1}:{3}dart-sass-{2}
          - variant: dart-sass-base-
            dockerfile: Dockerfile-dart-sass-base
            tags: |
              {0}/{1}:{3}dart-sass-base
              {0}/{1}:{3}dart-sass-base-{2}
              ghcr.io/{0}/{1}:{3}dart-sass-base
              ghcr.io/{0}/{1}:{3}dart-sass-base-{2}
          - variant: dart-sass-git-
            dockerfile: Dockerfile-dart-sass-git
            tags: |
              {0}/{1}:{3}dart-sass-git
              {0}/{1}:{3}dart-sass-git-{2}
              ghcr.io/{0}/{1}:{3}dart-sass-git
              ghcr.io/{0}/{1}:{3}dart-sass-git-{2}
          - variant: dart-sass-go-
            dockerfile: Dockerfile-dart-sass-go
            tags: |
              {0}/{1}:{3}dart-sass-go
              {0}/{1}:{3}dart-sass-go-{2}
              ghcr.io/{0}/{1}:{3}dart-sass-go
              ghcr.io/{0}/{1}:{3}dart-sass-go-{2}
          - variant: dart-sass-go-git-
            dockerfile: Dockerfile-dart-sass-go-git
            tags: |
              {0}/{1}:{3}dart-sass-go-git
              {0}/{1}:{3}dart-sass-go-git-{2}
              ghcr.io/{0}/{1}:{3}dart-sass-go-git
              ghcr.io/{0}/{1}:{3}dart-sass-go-git-{2}
          - variant: dart-sass-node-
            dockerfile: Dockerfile-dart-sass-node
            tags: |
              {0}/{1}:{3}dart-sass-node
              {0}/{1}:{3}dart-sass-node-{2}
              ghcr.io/{0}/{1}:{3}dart-sass-node
              ghcr.io/{0}/{1}:{3}dart-sass-node-{2}
          - variant: dart-sass-node-git-
            dockerfile: Dockerfile-dart-sass-node-git
            tags: |
              {0}/{1}:{3}dart-sass-node-git
              {0}/{1}:{3}dart-sass-node-git-{2}
              ghcr.io/{0}/{1}:{3}dart-sass-node-git
              ghcr.io/{0}/{1}:{3}dart-sass-node-git-{2}
          - variant: git-
            dockerfile: Dockerfile-git
            tags: |
              {0}/{1}:{3}git
              {0}/{1}:{3}git-{2}
              ghcr.io/{0}/{1}:{3}git
              ghcr.io/{0}/{1}:{3}git-{2}
          - variant: go-
            dockerfile: Dockerfile-go
            tags: |
              {0}/{1}:{3}go
              {0}/{1}:{3}go-{2}
              ghcr.io/{0}/{1}:{3}go
              ghcr.io/{0}/{1}:{3}go-{2}
          - variant: go-git-
            dockerfile: Dockerfile-go-git
            tags: |
              {0}/{1}:{3}go-git
              {0}/{1}:{3}go-git-{2}
              ghcr.io/{0}/{1}:{3}go-git
              ghcr.io/{0}/{1}:{3}go-git-{2}
          - variant: node-
            dockerfile: Dockerfile-node
            tags: |
              {0}/{1}:{3}node
              {0}/{1}:{3}node-{2}
              ghcr.io/{0}/{1}:{3}node
              ghcr.io/{0}/{1}:{3}node-{2}
          - variant: node-git-
            dockerfile: Dockerfile-node-git
            tags: |
              {0}/{1}:{3}node-git
              {0}/{1}:{3}node-git-{2}
              ghcr.io/{0}/{1}:{3}node-git
              ghcr.io/{0}/{1}:{3}node-git-{2}
          - variant: node-lts-
            dockerfile: Dockerfile-node-lts
            tags: |
              {0}/{1}:{3}node-lts
              {0}/{1}:{3}node-lts-{2}
              ghcr.io/{0}/{1}:{3}node-lts
              ghcr.io/{0}/{1}:{3}node-lts-{2}
          - variant: exts-
            dockerfile: Dockerfile-exts
            tags: |
              {0}/{1}:{3}exts
              {0}/{1}:{3}exts-{2}
              ghcr.io/{0}/{1}:{3}exts
              ghcr.io/{0}/{1}:{3}exts-{2}
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event.issue.number == 3 }}
    outputs:
      edition: ${{ matrix.edition }}
      extended: ${{ matrix.extended }}
      variant: ${{ matrix.variant }}
      dockerfile: ${{ matrix.dockerfile }}
      tags: ${{ matrix.tags }}
      version: ${{ steps.release.outputs.version }}
      build: ${{ steps.build.outputs.build }}
    steps:
      - name: Fetch latest Hugo release
        id: release
        uses: razonyang/github-action-github-latest-release@v1
        with:
          owner: gohugoio
          name: hugo
          prefix: v

      - name: Check if the image tag exists
        if: steps.release.outputs.version
        id: tag
        uses: razonyang/github-action-docker-image-tag-exists@v1
        with:
          owner: ${{ env.IMAGE_OWNER }}
          name: ${{ env.IMAGE_NAME }}
          tag: ${{ matrix.edition }}${{ matrix.variant }}${{ steps.release.outputs.version }}

      # The `build` is `true` on when the image tag doesn't exist or the commit message contains the word `[build]`.
      - id: build
        if: steps.release.outputs.version
        name: Check if there is a need to build images.
        run: |
          if [[ ${{ steps.tag.outputs.exists }} == 0 || "${{ github.event.head_commit.message }}" == *"[build]"* ]]; \
          then echo "build=1"; \
          else echo "build=0"; \
          fi \
          >> $GITHUB_OUTPUT;

  prepare:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.build == true
    outputs:
      ldflags: ${{ steps.ldflags.outputs.flags }}
    steps:
      # Checkout the main repository.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Checkout the Hugo repository for building.
      - name: Checkout Hugo repository
        uses: actions/checkout@v4
        with:
          repository: gohugoio/hugo
          ref: v${{ needs.check.outputs.version }}
          path: ./docker/hugo/src

      - name: Build meta
        id: build_meta
        run: |
          echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          cd ./docker/hugo/src && echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: LDFLAGS
        id: ldflags
        run: |
          HASH='github.com/gohugoio/hugo/common/hugo.commitHash=${{ steps.build_meta.outputs.hash }}'
          BUILD_DATE='github.com/gohugoio/hugo/common/hugo.buildDate=${{ steps.build_meta.outputs.date }}'
          VENDOR_INFO='github.com/gohugoio/hugo/common/hugo.vendorInfo=hugomods'
          LDFLAGS="-X $HASH -X $BUILD_DATE -X $VENDOR_INFO"
          echo $LDFLAGS
          echo "flags=$LDFLAGS" >> $GITHUB_OUTPUT

  build-and-test:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.check.outputs.build == true
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          load: true
          context: docker/hugo
          file: docker/hugo/${{ needs.check.outputs.dockerfile }}
          tags: hugomods/hugo:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            LDFLAGS=${{ needs.prepare.outputs.ldflags }}
            HUGO_VERSION=v${{ needs.check.outputs.version }}
            HUGO_EXTENDED=${{ needs.check.outputs.extended }}

      - id: hugo-version
        name: Save Hugo version for subsequent tests.
        run: echo "version=$(docker run --rm hugomods/hugo:test hugo version)" >> $GITHUB_OUTPUT
      
      - name: Check Hugo version
        run: |
          if [[ "${{ steps.hugo-version.outputs.version }}" != *"v${{ needs.check.outputs.version }}"* ]];
          then
            echo "Expected Hugo version "v${{ needs.check.outputs.version }}", but got "${{ steps.hugo-version.outputs.version }}"." && exit 1;
          fi

      - name: Check Hugo editions
        run: |
          if [[ "${{ needs.check.outputs.edition }}" == "std-" && "${{ steps.hugo-version.outputs.version }}" == *"extended"* ]];
          then
            echo "Expected standard edition of Hugo, got "${{ steps.hugo-version.outputs.version }}"." && exit 1;
          elif [[ "${{ needs.check.outputs.edition }}" == "" && "${{ steps.hugo-version.outputs.version }}" != *"extended"* ]]
          then
            echo "Expected extended edition of Hugo, got "${{ steps.hugo-version.outputs.version }}"." && exit 1;
          fi

      - name: Test site build
        run: |
          docker run --rm -v $PWD/site:/src hugomods/hugo:test hugo
        env:
          IMAGE_VARIANT: ${{ needs.check.outputs.variant }}

      - name: Test Extra Markdown Handlers
        if: contains(fromJson('["ci-", "exts-"]'), needs.check.outputs.variant)
        run: |
          docker run --rm -v $PWD/site:/src hugomods/hugo:test hugo --config config.yaml,config-markdown-handlers.yaml
        env:
          IMAGE_VARIANT: ${{ needs.check.outputs.variant }}

      - name: Check Git installation
        if: contains(fromJson('["", "ci-", "dart-sass-", "dart-sass-git-", "dart-sass-go-git-", "dart-sass-node-git-", "git-", "node-git-", "go-git-", "exts-"]'), needs.check.outputs.variant)
        run: docker run --rm hugomods/hugo:test git version

      - name: Test site build with --enableGitInfo
        if: contains(fromJson('["", "ci-", "dart-sass-", "dart-sass-git-", "dart-sass-go-git-", "dart-sass-node-git-", "git-", "node-git-", "go-git-", "exts-"]'), needs.check.outputs.variant)
        run: >-
          docker run --rm 
          -v $PWD/site:/src 
          hugomods/hugo:test 
          /bin/sh -c "git init && 
          git add -A && 
          git config --global user.email "support@hugomods.com" && 
          git config --global user.name "HugoMods" && 
          git commit -m 'Test commit' && 
          hugo --enableGitInfo"

      - name: Check Hugo server alias
        run: >-
          HUGO_SERVER_OUTPUT=$(docker run --rm -v $PWD/site:/src hugomods/hugo:test sh -c "server > server.out & sleep 5 && cat server.out") &&
          echo $HUGO_SERVER_OUTPUT &&
          if [[ $HUGO_SERVER_OUTPUT != *"bind address 0.0.0.0"* ]]; then echo "Expected bind "0.0.0.0" by default." && exit 1; fi
        env:
          IMAGE_VARIANT: ${{ needs.check.outputs.variant }}

      - name: Check Go installation
        if: contains(fromJson('["", "ci-", "dart-sass-", "dart-sass-go-", "dart-sass-go-git-", "go-", "go-git-", "exts-"]'), needs.check.outputs.variant)
        run: docker run --rm hugomods/hugo:test go version

      - name: Check Node.js, NPM and Yarn installation
        if: contains(fromJson('["", "ci-", "dart-sass-", "dart-sass-node-", "dart-sass-node-git-", "node-", "node-git-", "node-lts-", "exts-"]'), needs.check.outputs.variant)
        run: docker run --rm hugomods/hugo:test node -v && npm version && yarn -v
      
      - name: Check PostCSS, PurgeCSS, Autoprefixer and RTLCSS
        if: contains(fromJson('["ci-", "exts-"]'), needs.check.outputs.variant)
        run: >-
          docker run --rm
          -v $PWD/tests/postcss:/src 
          hugomods/hugo:test
          postcss ./main.css

      - name: Check CI tools
        if: contains(fromJson('["ci-"]'), needs.check.outputs.variant)
        run: >-
          docker run --rm
          hugomods/hugo:test
          sh -c "curl --version &&
          jq --version &&
          htmlproofer -v"

  build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: ${{ (github.head_ref || github.ref_name) == 'main' }}
    steps:
      # Reserve reg* variants for backwards compatibility.
      - id: tags
        name: Generate images tags
        run: |
          TAGS=${{
            (needs.check.outputs.edition == 'std-' && needs.check.outputs.variant != '') &&
            format(
              '{0}{1}',
              format(needs.check.outputs.tags, env.IMAGE_OWNER, env.IMAGE_NAME, needs.check.outputs.version, needs.check.outputs.edition),
              format(needs.check.outputs.tags, env.IMAGE_OWNER, env.IMAGE_NAME, needs.check.outputs.version, 'reg-')
            ) ||
            format(needs.check.outputs.tags, env.IMAGE_OWNER, env.IMAGE_NAME, needs.check.outputs.version, needs.check.outputs.edition)
          }}"
          echo $TAGS
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.IMAGE_OWNER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.IMAGE_OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          context: docker/hugo
          platforms: ${{ env.PLATFORMS }}
          file: docker/hugo/${{ needs.check.outputs.dockerfile }}
          tags: ${{ steps.tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            LDFLAGS=${{ needs.prepare.outputs.ldflags }}
            HUGO_VERSION=v${{ needs.check.outputs.version }}
            HUGO_EXTENDED=${{ needs.check.outputs.extended }}
